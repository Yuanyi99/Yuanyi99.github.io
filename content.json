{"meta":{"title":"清风的Blog","subtitle":"种一棵树的最好时间是十年前，其次是现在","description":"本网站是个人兴趣爱好，总结学习经验。","author":"清风","url":"http://Yuanyi99.github.io","root":"/"},"pages":[{"title":"tags","date":"2021-02-19T06:51:17.000Z","updated":"2021-02-19T06:51:39.178Z","comments":true,"path":"tags/index.html","permalink":"http://yuanyi99.github.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-02-19T06:50:10.000Z","updated":"2021-02-19T06:50:58.250Z","comments":true,"path":"categories/index.html","permalink":"http://yuanyi99.github.io/categories/index.html","excerpt":"","text":""},{"title":"404","date":"2021-02-19T06:53:05.000Z","updated":"2021-02-19T06:53:28.746Z","comments":true,"path":"404/index.html","permalink":"http://yuanyi99.github.io/404/index.html","excerpt":"","text":""},{"title":"about","date":"2021-02-19T06:52:00.000Z","updated":"2021-02-19T06:52:18.706Z","comments":true,"path":"about/index.html","permalink":"http://yuanyi99.github.io/about/index.html","excerpt":"","text":""},{"title":"test","date":"2021-05-11T04:14:36.000Z","updated":"2021-05-11T04:14:37.018Z","comments":true,"path":"test/index.html","permalink":"http://yuanyi99.github.io/test/index.html","excerpt":"","text":""},{"title":"","date":"2021-05-11T05:00:55.579Z","updated":"2021-05-11T05:00:55.579Z","comments":true,"path":"tags/渗透.html","permalink":"http://yuanyi99.github.io/tags/%E6%B8%97%E9%80%8F.html","excerpt":"","text":""}],"posts":[{"title":"VPN","slug":"VPN","date":"2021-04-11T12:38:41.000Z","updated":"2021-05-11T05:03:19.114Z","comments":true,"path":"2021/04/11/VPN/","link":"","permalink":"http://yuanyi99.github.io/2021/04/11/VPN/","excerpt":"","text":"VPN 每个路由器的路由表不能完全包含所有路由 私有地址的重复 相应的安全 MPLS==Multi Protocol label switching 多协议标签交换== 可以支持非IP的技术 在二层和三层头之间插入一个标签 通过路由表形成标签表 Show mpls forwording-table MPLS标签结构： 20 label（标签） 3 exp 1 栈底位 8 TTL 共32位 Lable Exp site TTL Label ：0-15号 保留标签，最小的可用标签16 2的16次方 exp：（实验/优先级位）类似QOS site：栈底位，如果置1，表示是最后一个标签，如果是0，表示还有还有其他标签。 TTL：存活时间 对标签的处理有三种方法 POP 弹出 PUSH 压入 SWAP 交换标签 次末跳弹出（倒数第二跳弹出标签）—PHP 原理：在倒数第二跳就不再打标签，直接发送给最后一跳路由器，免去了最后一跳路由器查标签，去标签 最后一跳路由器会发一个值为3的标签给邻居，这个标签的意思是POP 实际上 PHP技术 ，就是本地路由器想直连的邻居发送标签（3号保留标签），通知邻居pop标签。 配置：首先要有cef快速转发 ip cef 路由:看书 cef：做笔记 1234567891011121314151617show ip route 2.2.2.2show ip cef 2.2.2.2Mpls lable protocol ldp 启用标签LDP协议（TDP私有 LDP常用）Mpls ldp route-id lo0 force 强制使用环回0作为ID 作用和OSPF类似 所以想成为MPLS邻居 环回口必相通---route-id需通Mpls lable range xx yy 规定mpls 标签范围 （可选）端口下 mpls ip 端口下激活mpls 协议自动为LDPShow mpls ldp nei 查看邻居Show mpls interface 查看MPLS端口no Mpls ip propagate-ttl pe上配置---- MPLS内一跳,会隐藏运营商的IPOSPF中直接 mpls ldp autoconfig 自动配置MPLS---BGP 完美解决路由黑洞 VPN：MPLS术语 用户的边界网关通常标注为CE ISP的边界网关通常标注为PE，内部的路由器标注为P Vrf 虚拟路由转发 包含： Rd: 不同接入点的识别 同一边不同接入点的RD不能相同 Rt: route-target 不同路径的标签 相同接入点的标签必须一致 VPN通过BGP的community 属性传送 Vpn是community扩展属性 第一步： 1234vrf配置：（在pe中设置）Ip vrf XX（公司名字）Rd X:Y X:运营商分配自治系统号 实验中随便Rt im/ex/both X:X 第二步： 12345PE连接CE端： 在pe端口处调用ip vrf forwarding XX PE端地址会被抹除需要重新配地址 查看端口的地址 ： do sh run int e0/0Vrf直连ping : ping vrf XX A.B.C.Dce端可以直接ping通pe端 第三步： 123456PE BGP配置：Router bgp XX和CE相连address-family ipv4 vrf XXNei A.B.C.D remote XNei A.B.C.D active 123456789PE之间相连 bgp下激活address-family vpnv4Nei A.B.C.D active社团属性自动产生。查看VRF路由: sh ip route vrf XX查看bgp邻居: sh ip bgp all sum ping do trace 192.168.1.2 sou lo0 numeric CE端BGP不变 环回口必须是32位 1.route-target in /ex BGP是大型的距离矢量路由 ——默认有水平分割 子接口int e0/0.? encapsulation dot1Q XX 接口上打标签 子接口能识别 是标签 封装标签后 可以写IP地址，供其他路由识别 neighbor x.x.x.x allowas-in 汇总的特点。。汇总可以抹除 as号 ，相同的as号不能出入 检查：查路由表 sh ip route vrf XX —检查VRF下的路由 安全几个加密算法：RSA（Rivest、Shamir 和 Adleman）算法： ① 用计算机随机生成两个大素数p和q（保密），然后计算这两个素数的乘积n=pq（公开）。 ② 计算小于n并且与n互质的整数的个数，即欧拉函数$ (n)=(p–1)(q–1)$ （保密）。利用p和q有条件的生成加密密钥e，这里的条件是：随机整数e满足1&lt;e&lt; (n)，并且e和(n)互质，即gcd (e, (n))=1（公开）。 ③ 计算与n互质的解密密钥d。计算公式为de=1 mod (n)（保密）。 ④ 销毁p、q、(n)；公开公钥{e，n}，保管好私钥{d，n}。 公钥KU n：两素数p和q的乘积（p和q必须保密）（n为模值）e：与(p-1)*(q-1)互质（e称为公钥指数） 私钥KR n：两素数p和q的乘积（p和q必须保密）（n为模值）d：满足$（de） mod ((p-1)(q-1)) = 1$（d称为私钥指数） 加密过程 $C=M^e mod n$ （C为密文） 解密过程 $M=C^d mod n$ （M为明文） DH算法（Diffie-Hellman算法）： 双方都验证K值相等 配置：​ 阶段一：ISAMAP 12345678crypto isamap policy xx //定义策略号group 2 //定义组encryption 3des //定义加密算法hash md5 //定义HMAC 密钥化的哈希authentication pre-share //定义认证方式crypto isakmp key cisco address 11.11.23.3（对等体peer地址） 定义预共享密钥 ​ 第二步：阶段二ipsec 1234crypto ipsec transform-set my esp-des esp-md5-hmac （my是transform标签）mode tunnel //隧道模式transfrom-set: ​ 第三步： 配置加密流量 12IP access-list extended 100 //拓展列表permit ip host 12.1.1.1 host 12.1.1.2 // 源ip 和 目的IP ​ 第四步： map 将感兴趣的流量与转换集映射 12345crypto map think(name) 10 ipsec-isakmap set peer 12.1.1.2 //定义对等体set transform-set my //定义转换集match address 100 // 抓取配置的列表 ​ 第五步： 接口下 map 与 接口映射 12int e0/0crypto map think 检查： 12show crypto ipsec sashow crypto engine connections active //检查加密是否成功，ping数据包时查看 DMVPN（必考）动态多点VPN1.简单的 Hub Spoke 模型 提供 full mash（全互联） 连通性 2.支持 spoke 动态地址 3.增加新的 spoke 不需要改变hub配置 4.spoke 和 hub之间动态产生隧道加密 实现组件 MGRE 多点GRE（通用路由封装协议），点到多点隧道 —-tunnel mode NHRP 二层的客户服务解析协议 用于映射隧道地址，类似ARP(ARP - IP - MAC) Next hop Resolition Protocol 动态路由 ​ Step 1: 12345678910111213141516171819202122232425262728293031Hub spoke 互建tunnelHub:int Tunnel 0ip add 172.16.1.1 255.255.255.0tunnel source 12.1.1.1tunnel mode gre MutulPointip nhrp network-id 10ip nhrp map multicast dynamicSpoke:int tunnel 0ip add 172.16.1.2 255.255.255.0tunnel source 23.1.1.3 (不同的spoke改变一下即可)tunnel mode gre mutuLpointip nhrp network-id 10ip nhrp map 172.16.1.1 12.1.1.1 (hub的虚实) 静态配置Hub映射，隧道虚拟地址映射到公网地址ip nhrp map multicast 12.1.1.1 （hub的源地址）手动映射组播到Hub公网地址，便于spoke和hub建立动态路由IP nhrp nhs 172.16.1.1(hub虚) spoke启动后会到这个服务器注册自己的虚拟隧道地址到公网结果 tunnel可以互通STEP2 动态协议： Eigrp : 水平分割 在hub上操作 int tunnel 0 no ip split-horizon eigrp xx 在起邻居的口把水平分割关闭 spoke间一跳 通用： hub: ip nhrp redirect / spoke: ip nhrp shortcut","categories":[],"tags":[]},{"title":"数据包拓展","slug":"数据包拓展","date":"2021-03-11T04:50:41.000Z","updated":"2021-05-11T05:04:07.897Z","comments":true,"path":"2021/03/11/数据包拓展/","link":"","permalink":"http://yuanyi99.github.io/2021/03/11/%E6%95%B0%E6%8D%AE%E5%8C%85%E6%8B%93%E5%B1%95/","excerpt":"","text":"HTTP/S数据包1.http / https HTTP HTTPS HTTP HTTP TCP SSL &amp; TLS(加密) IP TCP IP HTTP的简要通信过程建立连接 ——&gt;发送请求数据包 ——&gt;返回相应数据包——&gt;关闭连接 HTTPS的简要通讯过程 Request请求数据包数据格式1234567891011121314151617181920212223242526272829请求行 ： 请求类型 /请求资源路径 协议的版本和类型 HTTP规定了8种可能的请求方法(最常见的还是 get 和 post 方法)： *get: 检索url中标识资源的一个简单请求 *head: 与get方法相同，服务器只返回状态行和头标，并不返回请求文档 *post: 服务器接受被写入客户端输出流中的数据的请求 put: 服务器保存请求数据作为指定URL新内容的请求 delete: 服务器删除URL中命令的资源的请求 options: 关于服务器支持的请求方法信息的请求 trace:web服务器反馈http请求和其头标的请求 connect: 请求头 ： 一些键值对，浏览器和web服务器之间都可以发送，特定的某种含义 Host: 主机或域名地址 空行 ： 请求头与请求体之间用一个空行隔开请求体 ：要发送的数据（一般post提交用）例:GET /?cate=2 HTTP/1.1 //请求行Host: www.xiaodi8.comProxy-Connection: keep-aliveUpgrade-Insecure-Requests: 1DNT: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36 Edg/90.0.818.51Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Referer: http://xiaodi8.com/ //从哪跳转过来的Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6,ja;q=0.5,zh-TW;q=0.4Cookie: ZDEDebuggerPresent=php,phtml,php3; timezone=8; _ga=GA1.2.204207680.1619924442; _gid=GA1.2.1405938152.1619924442","categories":[],"tags":[]},{"title":"渗透基础知识","slug":"渗透入门","date":"2021-03-11T04:50:41.000Z","updated":"2021-05-11T05:02:17.818Z","comments":true,"path":"2021/03/11/渗透入门/","link":"","permalink":"http://yuanyi99.github.io/2021/03/11/%E6%B8%97%E9%80%8F%E5%85%A5%E9%97%A8/","excerpt":"","text":"基础入门1.域名12什么是域名？多级域名？ 2.DNS12345678什么是 DNS? 域名系统 管理域名和ip的对应关系本地hosts 与 DNS的关系？ hosts文件相当于一个本地DNS服务器，电脑优先在本地hosts文件中查找网址对应IP,找不到才会向DNS请求CDN ? 和 DNS的关系？ CDN 内容分发网络，加速用的，让用户就近访问数据 ，依靠DNS服务定位常见的DNS安全攻击有那些？ 缓存投毒，DNS劫持，域名劫持，DNS DDoS攻击，反射式DNS放大攻击 3.WEB12345678910web的组成架构模型 网站源码： 分脚本类型，分应用方向 操作系统： windows， linux 中间件： apache, iis ,tomcat, nginx等 数据库： mysql ，oracle， db2 ，postsql架构漏洞安全测试简要介绍： 为什么要从WEB层面为主为首？ web用的多 WEB相关漏洞介绍背景介绍Web应用一般是指B/S架构的通过HTTP/HTTPS协议提供服务的统称。 随着互联网的发展，Web应用已经融入了我们的日常生活的各个方面。 在目前的Web应用中，大多数应用不都是静态的网页浏览，而是涉及到服务器的动态处理。 如果开发者的安全意识不强，就会导致Web应用安全问题层出不穷。 我们一般说的Web应用攻击，是指攻击者通过浏览器或者其他的攻击工具，在URL或者其他的输入区域(如表单等)，向Web服务器发送特殊的请求，从中发现Web应用程序中存在的漏洞，进而操作和控制网站，达到入侵者的目的。 常见安全漏洞一、SQL注入SQL注入(SQL Injection)，是最常见影响非常广泛的漏洞。攻击者通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令，从而入侵数据库来执行未授意的任意查询。 SQL注入可能造成的危害有：网页、数据被篡改，核心数据被窃取，数据库所在的服务器被攻击，变成傀儡主机。 例如有些网站没有使用预编译sql，用户在界面上输入的一些字段被添加到sql中，很有可能这些字段包含一些恶意的sql命令。如:password = “1’ OR ‘1’=’1”；即使不知道用户密码，也能正常登录。 测试方法： 在需要进行查询的页面，输入正确查询条件 and 1=1等简单sql语句，查看应答结果，如与输入正确查询条件返回结果一致，表明应用程序对用户输入未进行过滤，可以初步判断此处存在SQL注入漏洞 二、XSS跨站脚本攻击SS(Cross Site Script)，与SQL注入相似，XSS是通过网页插入恶意脚本，主要用到的技术也是前端的HTML和JavaScript脚本。当用户浏览网页时，实现控制用户浏览器行为的攻击方式。 一次成功的XSS，可以获取到用户的cookie，利用该cookie盗取用户对该网站的操作权限；也可以获取到用户联系人列表，利用被攻击者的身份向特定的目标群发送大量的垃圾信息，等等。 XSS分为三类：存储型(持久性XSS)、反射型(非持久性XSS)、DOM型。 测试方法： 在数据输入界面，输入：，保存成功后如果弹出对话框，表明此处存在一个XSS 漏洞。 或把url请求中参数改为，如果页面弹出对话框，表明此处存在一个XSS 漏洞。 三、CSRF跨站伪造请求攻击CSRF(Cross Site Request Forgery)，利用已登录的用户身份，以用户的名义发送恶意请求，完成非法操作。 例如：用户如果浏览并信任了存在CSRF漏洞的网站A，浏览器产生了相应的cookie，用户在没有退出该网站的情况下，访问了危险网站B 。 危险网站B要求访问网站A，发出一个请求。浏览器带着用户的cookie信息访问了网站A，因为网站A不知道是用户自身发出的请求还是危险网站B发出的请求，所以就会处理危险网站B的请求，这样就完成了模拟用户操作的目的。这就是CSRF攻击的基本思想。 测试方法： 同个浏览器打开两个页面，一个页面权限失效后，另一个页面是否可操作成功，如果仍然能操作成功即存在风险。 使用工具发送请求，在http请求头中不加入referer字段，检验返回消息的应答，应该重新定位到错误界面或者登录界面。 四、文件上传漏洞文件上传攻击是指攻击者上传了一个可执行文件到服务器上，并执行。 这种攻击方式是最直接有效的。上传的文件可以是病毒、木马、恶意脚本或者是webshell等等。 Webshell是以asp、php、jsp或者cgi等网页文件形式存在的一种命令执行环境，也可以说是一种网页后门。攻击者在受影响系统防止或插入webshell后，可以通过webshell方便进入系统，达到控制网站服务器的目的。 测试方法： 对上传的文件类型、大小等进行严格校验，禁止上传恶意代码的文件。 对相关目录的执行权限进行校验，可以通过浏览器访问Web 服务器上的所有目录，检查是否返回目录结构，如果显示的是目录结构，则可能存在安全问题。 五、URL跳转漏洞URL跳转漏洞，即未经验证的重定向漏洞，是指Web程序直接跳转到参数中的URL，或者在页面中引入了任意开发者的URL，将程序引导到不安全的第三方区域，从而导致安全问题。 测试方法： 1.使用抓包工具抓取请求。 2.抓取302的url，修改目标地址，查看是否能跳转。 ps：不过现在很多跳转都加了referer的校验导致攻击者跳转失败。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2021-02-19T05:36:30.996Z","updated":"2021-05-11T04:38:57.895Z","comments":true,"path":"2021/02/19/hello-world/","link":"","permalink":"http://yuanyi99.github.io/2021/02/19/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}