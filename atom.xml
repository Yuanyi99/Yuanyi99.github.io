<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>清风的Blog</title>
  
  <subtitle>种一棵树的最好时间是十年前，其次是现在</subtitle>
  <link href="http://yuanyi99.github.io/atom.xml" rel="self"/>
  
  <link href="http://yuanyi99.github.io/"/>
  <updated>2021-05-11T05:03:19.114Z</updated>
  <id>http://yuanyi99.github.io/</id>
  
  <author>
    <name>清风</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VPN</title>
    <link href="http://yuanyi99.github.io/2021/04/11/VPN/"/>
    <id>http://yuanyi99.github.io/2021/04/11/VPN/</id>
    <published>2021-04-11T12:38:41.000Z</published>
    <updated>2021-05-11T05:03:19.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h2><p> 每个路由器的路由表不能完全包含所有路由</p><p> 私有地址的重复    </p><p> 相应的安全 </p><h3 id="MPLS"><a href="#MPLS" class="headerlink" title="MPLS"></a>MPLS</h3><p>==Multi Protocol label switching 多协议标签交换==</p><p>可以支持非IP的技术</p><p>在二层和三层头之间插入一个标签</p><p>通过路由表形成标签表</p><p>Show mpls forwording-table</p><p>MPLS标签结构：</p><p>20 label（标签）  3 exp    1 栈底位  8 TTL   共32位</p><p>Lable               Exp        site      TTL               </p><p>Label ：0-15号 保留标签，最小的可用标签16    2的16次方</p><p>exp：（实验/优先级位）类似QOS</p><p>site：栈底位，如果置1，表示是最后一个标签，如果是0，表示还有还有其他标签。</p><p>TTL：存活时间 </p><p>对标签的处理有三种方法</p><ol><li>POP    弹出</li><li>PUSH   压入</li><li>SWAP   交换标签</li></ol><p>次末跳弹出（倒数第二跳弹出标签）—PHP</p><p>原理：在倒数第二跳就不再打标签，直接发送给最后一跳路由器，免去了最后一跳路由器查标签，去标签</p><p>最后一跳路由器会发一个值为3的标签给邻居，这个标签的意思是POP</p><p>实际上 PHP技术 ，就是本地路由器想直连的邻居发送标签（3号保留标签），通知邻居pop标签。</p><p>配置：<br>首先要有cef快速转发     ip cef  </p><p>路由:看书</p><p>cef：做笔记 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">show ip route <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span></span><br><span class="line">show ip cef <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span></span><br><span class="line"></span><br><span class="line">Mpls lable protocol ldp  启用标签LDP协议（TDP私有 LDP常用）</span><br><span class="line">Mpls ldp route-id lo0 force 强制使用环回<span class="number">0</span>作为ID 作用和OSPF类似 </span><br><span class="line">所以想成为MPLS邻居 环回口必相通---route-id需通</span><br><span class="line"></span><br><span class="line">Mpls lable range xx yy  规定mpls 标签范围 （可选）</span><br><span class="line">端口下 mpls ip 端口下激活mpls 协议自动为LDP</span><br><span class="line"></span><br><span class="line">Show mpls ldp nei  查看邻居</span><br><span class="line">Show mpls interface 查看MPLS端口</span><br><span class="line"></span><br><span class="line">no Mpls ip propagate-ttl   pe上配置---- MPLS内一跳,会隐藏运营商的IP</span><br><span class="line"></span><br><span class="line">OSPF中直接 mpls ldp autoconfig 自动配置</span><br><span class="line">MPLS---BGP  完美解决路由黑洞</span><br></pre></td></tr></table></figure><h3 id="VPN：MPLS"><a href="#VPN：MPLS" class="headerlink" title="VPN：MPLS"></a>VPN：MPLS</h3><p>术语</p><p>用户的边界网关通常标注为CE</p><p>ISP的边界网关通常标注为PE，内部的路由器标注为P</p><p>Vrf 虚拟路由转发</p><p>包含：</p><p>Rd: 不同接入点的识别   同一边不同接入点的RD不能相同 </p><p>Rt: route-target 不同路径的标签  相同接入点的标签必须一致</p><p>VPN通过BGP的community 属性传送</p><p>Vpn是community扩展属性</p><p>第一步：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vrf配置：（在pe中设置）</span><br><span class="line">Ip vrf XX（公司名字）</span><br><span class="line">Rd X:Y    X:运营商分配自治系统号  实验中随便</span><br><span class="line">Rt im/ex/both X:X</span><br></pre></td></tr></table></figure><p>第二步：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PE连接CE端： 在pe端口处调用</span><br><span class="line">ip vrf forwarding XX  PE端地址会被抹除需要重新配地址 </span><br><span class="line">查看端口的地址 ： <span class="keyword">do</span> sh run <span class="keyword">int</span> e0/<span class="number">0</span></span><br><span class="line">Vrf直连ping : ping vrf XX A.B.C.D</span><br><span class="line">ce端可以直接ping通pe端</span><br></pre></td></tr></table></figure><p>第三步：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PE BGP配置：</span><br><span class="line">Router bgp XX</span><br><span class="line">和CE相连</span><br><span class="line">address-family ipv4 vrf XX</span><br><span class="line">Nei A.B.C.D remote X</span><br><span class="line">Nei A.B.C.D active</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PE之间相连 bgp下激活</span><br><span class="line">address-family vpnv4</span><br><span class="line">Nei A.B.C.D active</span><br><span class="line">社团属性自动产生。</span><br><span class="line">查看VRF路由: sh ip route vrf XX</span><br><span class="line">查看bgp邻居: sh ip bgp all sum</span><br><span class="line">    </span><br><span class="line">ping</span><br><span class="line">    <span class="keyword">do</span> trace <span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span> sou lo0 numeric</span><br></pre></td></tr></table></figure><p>CE端BGP不变 环回口必须是32位</p><p>1.route-target in /ex</p><p>   BGP是大型的距离矢量路由</p><p>   ——默认有水平分割</p><ol start="2"><li><p>子接口<br>int e0/0.?</p><p>encapsulation dot1Q XX    接口上打标签</p><p>子接口能识别 是标签</p><p>封装标签后 可以写IP地址，供其他路由识别</p><p>neighbor x.x.x.x allowas-in</p><p>汇总的特点。。汇总可以抹除 as号 ，相同的as号不能出入</p><p>检查：查路由表</p></li></ol><p>sh ip route vrf XX  —检查VRF下的路由</p><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><h3 id="几个加密算法："><a href="#几个加密算法：" class="headerlink" title="几个加密算法："></a>几个加密算法：</h3><p>RSA（Rivest、Shamir 和 Adleman）算法：</p><p>① 用计算机随机生成两个大素数p和q（保密），然后计算这两个素数的乘积n=pq（公开）。</p><p>② 计算小于n并且与n互质的整数的个数，即欧拉函数$ (n)=(p–1)(q–1)$ （保密）。利用p和q有条件的生成加密密钥e，这里的条件是：随机整数e满足1&lt;e&lt; (n)，并且e和(n)互质，即gcd (e, (n))=1（公开）。</p><p>③ 计算与n互质的解密密钥d。计算公式为de=1 mod (n)（保密）。</p><p>④ 销毁p、q、(n)；公开公钥{e，n}，保管好私钥{d，n}。</p><table><thead><tr><th>公钥KU</th><th>n：两素数p和q的乘积（p和q必须保密）（n为模值）e：与(p-1)*(q-1)互质（e称为公钥指数）</th></tr></thead><tbody><tr><td>私钥KR</td><td>n：两素数p和q的乘积（p和q必须保密）（n为模值）d：满足$（d<em>e） mod ((p-1)</em>(q-1)) = 1$（d称为私钥指数）</td></tr><tr><td>加密过程</td><td>$C=M^e  mod  n$ （C为密文）</td></tr><tr><td>解密过程</td><td>$M=C^d  mod  n$ （M为明文）</td></tr></tbody></table><p>DH算法（Diffie-Hellman算法）： 双方都验证K值相等</p><p><img src="../img/QQ%E5%9B%BE%E7%89%8720210326212006.jpg"></p><h3 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h3><p>​    阶段一：ISAMAP </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">crypto isamap policy xx  <span class="comment">//定义策略号</span></span><br><span class="line">group <span class="number">2</span> <span class="comment">//定义组</span></span><br><span class="line">encryption  <span class="number">3</span>des <span class="comment">//定义加密算法</span></span><br><span class="line">hash md5  <span class="comment">//定义HMAC 密钥化的哈希</span></span><br><span class="line">authentication pre-share   <span class="comment">//定义认证方式</span></span><br><span class="line"></span><br><span class="line">crypto isakmp key  cisco address <span class="number">11.11</span><span class="number">.23</span><span class="number">.3</span>（对等体peer地址） 定义预共享密钥 </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    第二步：阶段二ipsec</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">crypto ipsec transform-<span class="built_in">set</span> my </span><br><span class="line">esp-des esp-md5-hmac （my是transform标签）</span><br><span class="line">mode tunnel   <span class="comment">//隧道模式</span></span><br><span class="line">transfrom-<span class="built_in">set</span>:      </span><br></pre></td></tr></table></figure><p>​    第三步： 配置加密流量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IP access-<span class="built_in">list</span> extended <span class="number">100</span>   <span class="comment">//拓展列表</span></span><br><span class="line">permit ip  host <span class="number">12.1</span><span class="number">.1</span><span class="number">.1</span> host <span class="number">12.1</span><span class="number">.1</span><span class="number">.2</span>  <span class="comment">// 源ip 和 目的IP</span></span><br></pre></td></tr></table></figure><p>​    第四步： map 将感兴趣的流量与转换集映射</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">crypto map think(name) 10 ipsec-isakmap </span><br><span class="line"><span class="built_in">set</span> peer <span class="number">12.1</span><span class="number">.1</span><span class="number">.2</span> <span class="comment">//定义对等体</span></span><br><span class="line"><span class="built_in">set</span> transform-<span class="built_in">set</span> my  <span class="comment">//定义转换集</span></span><br><span class="line">match address <span class="number">100</span> <span class="comment">// 抓取配置的列表</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    第五步： 接口下 map 与 接口映射</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> e0/<span class="number">0</span></span><br><span class="line">crypto <span class="built_in">map</span> think </span><br></pre></td></tr></table></figure><p>检查：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show crypto ipsec sa</span><br><span class="line">show crypto engine connections active  <span class="comment">//检查加密是否成功，ping数据包时查看</span></span><br></pre></td></tr></table></figure><h2 id="DMVPN（必考）"><a href="#DMVPN（必考）" class="headerlink" title="DMVPN（必考）"></a>DMVPN（必考）</h2><h3 id="动态多点VPN"><a href="#动态多点VPN" class="headerlink" title="动态多点VPN"></a>动态多点VPN</h3><p>1.简单的 Hub Spoke 模型 提供 full mash（全互联） 连通性</p><p>2.支持 spoke 动态地址</p><p>3.增加新的 spoke 不需要改变hub配置</p><p>4.spoke 和 hub之间动态产生隧道加密</p><h3 id="实现组件"><a href="#实现组件" class="headerlink" title="实现组件"></a>实现组件</h3><ol><li><p>MGRE 多点GRE（通用路由封装协议），点到多点隧道  —-tunnel mode </p></li><li><p>NHRP 二层的客户服务解析协议 用于映射隧道地址，类似ARP(ARP - IP - MAC)</p><p>Next hop Resolition Protocol</p></li><li><p>动态路由</p></li></ol><p>​    Step 1:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Hub spoke 互建tunnel</span><br><span class="line"></span><br><span class="line">Hub:</span><br><span class="line"><span class="keyword">int</span> Tunnel <span class="number">0</span></span><br><span class="line">ip add <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line">tunnel source <span class="number">12.1</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line">tunnel mode gre MutulPoint</span><br><span class="line">ip nhrp network-id <span class="number">10</span></span><br><span class="line">ip nhrp <span class="built_in">map</span> multicast dynamic</span><br><span class="line"></span><br><span class="line">Spoke:</span><br><span class="line"><span class="keyword">int</span> tunnel <span class="number">0</span></span><br><span class="line">ip add <span class="number">172.16</span><span class="number">.1</span><span class="number">.2</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line">tunnel source <span class="number">23.1</span><span class="number">.1</span><span class="number">.3</span> (不同的spoke改变一下即可)</span><br><span class="line">tunnel mode gre mutuLpoint</span><br><span class="line">ip nhrp network-id <span class="number">10</span></span><br><span class="line">ip nhrp <span class="built_in">map</span> <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">12.1</span><span class="number">.1</span><span class="number">.1</span> (hub的虚实) 静态配置Hub映射，隧道虚拟地址映射到公网地址</span><br><span class="line">ip nhrp <span class="built_in">map</span> multicast <span class="number">12.1</span><span class="number">.1</span><span class="number">.1</span> （hub的源地址）手动映射组播到Hub公网地址，便于spoke和hub建立动态路由</span><br><span class="line">IP nhrp nhs <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span>(hub虚) spoke启动后会到这个服务器注册自己的虚拟隧道地址到公网</span><br><span class="line">结果 tunnel可以互通</span><br><span class="line"></span><br><span class="line">STEP2</span><br><span class="line"> 动态协议：</span><br><span class="line">  Eigrp : 水平分割 在hub上操作</span><br><span class="line">  <span class="keyword">int</span> tunnel <span class="number">0</span></span><br><span class="line">  no ip split-horizon eigrp xx</span><br><span class="line">  在起邻居的口把水平分割关闭</span><br><span class="line">  </span><br><span class="line">  spoke间一跳</span><br><span class="line">  </span><br><span class="line">  通用： hub: ip nhrp redirect / spoke: ip nhrp shortcut</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;VPN&quot;&gt;&lt;a href=&quot;#VPN&quot; class=&quot;headerlink&quot; title=&quot;VPN&quot;&gt;&lt;/a&gt;VPN&lt;/h2&gt;&lt;p&gt; 每个路由器的路由表不能完全包含所有路由&lt;/p&gt;
&lt;p&gt; 私有地址的重复    &lt;/p&gt;
&lt;p&gt; 相应的安全 &lt;/p&gt;
&lt;h3 id</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数据包拓展</title>
    <link href="http://yuanyi99.github.io/2021/03/11/%E6%95%B0%E6%8D%AE%E5%8C%85%E6%8B%93%E5%B1%95/"/>
    <id>http://yuanyi99.github.io/2021/03/11/%E6%95%B0%E6%8D%AE%E5%8C%85%E6%8B%93%E5%B1%95/</id>
    <published>2021-03-11T04:50:41.000Z</published>
    <updated>2021-05-11T05:04:07.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP-S数据包"><a href="#HTTP-S数据包" class="headerlink" title="HTTP/S数据包"></a>HTTP/S数据包</h2><h3 id="1-http-https"><a href="#1-http-https" class="headerlink" title="1.http / https"></a>1.http / https</h3><p><img src="images/http.png"></p><table><thead><tr><th align="center">HTTP</th><th align="center">HTTPS</th></tr></thead><tbody><tr><td align="center">HTTP</td><td align="center">HTTP</td></tr><tr><td align="center">TCP</td><td align="center">SSL  &amp;  TLS(加密)</td></tr><tr><td align="center">IP</td><td align="center">TCP</td></tr><tr><td align="center"></td><td align="center">IP</td></tr></tbody></table><h4 id="HTTP的简要通信过程"><a href="#HTTP的简要通信过程" class="headerlink" title="HTTP的简要通信过程"></a>HTTP的简要通信过程</h4><p>建立连接 ——&gt;发送请求数据包 ——&gt;返回相应数据包——&gt;关闭连接</p><h4 id="HTTPS的简要通讯过程"><a href="#HTTPS的简要通讯过程" class="headerlink" title="HTTPS的简要通讯过程"></a>HTTPS的简要通讯过程</h4><img src="images/https.png" style="zoom:80%;" /><h3 id="Request请求数据包数据格式"><a href="#Request请求数据包数据格式" class="headerlink" title="Request请求数据包数据格式"></a>Request请求数据包数据格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">请求行 ： 请求类型 /请求资源路径 协议的版本和类型</span><br><span class="line">  HTTP规定了<span class="number">8</span>种可能的请求方法(最常见的还是 get 和 post 方法)：</span><br><span class="line"> *get: 检索url中标识资源的一个简单请求</span><br><span class="line"> *head: 与get方法相同，服务器只返回状态行和头标，并不返回请求文档</span><br><span class="line"> *post: 服务器接受被写入客户端输出流中的数据的请求</span><br><span class="line">put: 服务器保存请求数据作为指定URL新内容的请求</span><br><span class="line">delete: 服务器删除URL中命令的资源的请求</span><br><span class="line">options: 关于服务器支持的请求方法信息的请求</span><br><span class="line">trace:web服务器反馈http请求和其头标的请求</span><br><span class="line">connect: </span><br><span class="line">请求头 ： 一些键值对，浏览器和web服务器之间都可以发送，特定的某种含义</span><br><span class="line">  Host: 主机或域名地址</span><br><span class="line">    </span><br><span class="line">空行  ：  请求头与请求体之间用一个空行隔开</span><br><span class="line">请求体 ：要发送的数据（一般post提交用）</span><br><span class="line"></span><br><span class="line">例:</span><br><span class="line">GET /?cate=<span class="number">2</span> HTTP/<span class="number">1.1</span>      <span class="comment">//请求行</span></span><br><span class="line">Host: www.xiaodi8.com</span><br><span class="line">Proxy-Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">DNT: <span class="number">1</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">90.0</span><span class="number">.4430</span><span class="number">.93</span> Safari/<span class="number">537.36</span> Edg/<span class="number">90.0</span><span class="number">.818</span><span class="number">.51</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,image/apng,*<span class="comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="comment">Referer: http://xiaodi8.com/    //从哪跳转过来的</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6,ja;q=0.5,zh-TW;q=0.4</span></span><br><span class="line"><span class="comment">Cookie: ZDEDebuggerPresent=php,phtml,php3; timezone=8; _ga=GA1.2.204207680.1619924442; _gid=GA1.2.1405938152.1619924442</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HTTP-S数据包&quot;&gt;&lt;a href=&quot;#HTTP-S数据包&quot; class=&quot;headerlink&quot; title=&quot;HTTP/S数据包&quot;&gt;&lt;/a&gt;HTTP/S数据包&lt;/h2&gt;&lt;h3 id=&quot;1-http-https&quot;&gt;&lt;a href=&quot;#1-http-https&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>渗透基础知识</title>
    <link href="http://yuanyi99.github.io/2021/03/11/%E6%B8%97%E9%80%8F%E5%85%A5%E9%97%A8/"/>
    <id>http://yuanyi99.github.io/2021/03/11/%E6%B8%97%E9%80%8F%E5%85%A5%E9%97%A8/</id>
    <published>2021-03-11T04:50:41.000Z</published>
    <updated>2021-05-11T05:02:17.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础入门"><a href="#基础入门" class="headerlink" title="基础入门"></a>基础入门</h2><h3 id="1-域名"><a href="#1-域名" class="headerlink" title="1.域名"></a>1.域名</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">什么是域名？</span><br><span class="line">多级域名？</span><br></pre></td></tr></table></figure><h3 id="2-DNS"><a href="#2-DNS" class="headerlink" title="2.DNS"></a>2.DNS</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">什么是 DNS?</span><br><span class="line">  域名系统 管理域名和ip的对应关系</span><br><span class="line">本地hosts 与 DNS的关系？</span><br><span class="line">  hosts文件相当于一个本地DNS服务器，电脑优先在本地hosts文件中查找网址对应IP,找不到才会向DNS请求</span><br><span class="line">CDN ? 和 DNS的关系？</span><br><span class="line">  CDN 内容分发网络，加速用的，让用户就近访问数据 ，依靠DNS服务定位</span><br><span class="line">常见的DNS安全攻击有那些？</span><br><span class="line">  缓存投毒，DNS劫持，域名劫持，DNS DDoS攻击，反射式DNS放大攻击</span><br></pre></td></tr></table></figure><h3 id="3-WEB"><a href="#3-WEB" class="headerlink" title="3.WEB"></a>3.WEB</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">web的组成架构模型</span><br><span class="line">网站源码： 分脚本类型，分应用方向</span><br><span class="line">操作系统： windows， linux</span><br><span class="line">中间件： apache, iis ,tomcat, nginx等</span><br><span class="line">数据库： mysql ，oracle， db2 ，postsql</span><br><span class="line"></span><br><span class="line">架构漏洞安全测试简要介绍：</span><br><span class="line"></span><br><span class="line">为什么要从WEB层面为主为首？</span><br><span class="line">web用的多</span><br></pre></td></tr></table></figure><h3 id="WEB相关漏洞介绍"><a href="#WEB相关漏洞介绍" class="headerlink" title="WEB相关漏洞介绍"></a>WEB相关漏洞介绍</h3><h4 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h4><p>Web应用一般是指B/S架构的通过HTTP/HTTPS协议提供服务的统称。</p><p>随着互联网的发展，Web应用已经融入了我们的日常生活的各个方面。</p><p>在目前的Web应用中，大多数应用不都是静态的网页浏览，而是涉及到服务器的动态处理。</p><p>如果开发者的安全意识不强，就会导致Web应用安全问题层出不穷。</p><p>我们一般说的Web应用攻击，是指攻击者通过浏览器或者其他的攻击工具，在URL或者其他的输入区域(如表单等)，向Web服务器发送特殊的请求，从中发现Web应用程序中存在的漏洞，进而操作和控制网站，达到入侵者的目的。</p><h3 id="常见安全漏洞"><a href="#常见安全漏洞" class="headerlink" title="常见安全漏洞"></a>常见安全漏洞</h3><h5 id="一、SQL注入"><a href="#一、SQL注入" class="headerlink" title="一、SQL注入"></a>一、SQL注入</h5><p>SQL注入(SQL Injection)，是最常见影响非常广泛的漏洞。攻击者通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令，从而入侵数据库来执行未授意的任意查询。</p><p>SQL注入可能造成的危害有：网页、数据被篡改，核心数据被窃取，数据库所在的服务器被攻击，变成傀儡主机。</p><p>例如有些网站没有使用预编译sql，用户在界面上输入的一些字段被添加到sql中，很有可能这些字段包含一些恶意的sql命令。如:password = “1’ OR ‘1’=’1”；即使不知道用户密码，也能正常登录。</p><p><strong>测试方法：</strong></p><p>在需要进行查询的页面，输入正确查询条件 and 1=1等简单sql语句，查看应答结果，如与输入正确查询条件返回结果一致，表明应用程序对用户输入未进行过滤，可以初步判断此处存在SQL注入漏洞</p><h4 id="二、XSS跨站脚本攻击"><a href="#二、XSS跨站脚本攻击" class="headerlink" title="二、XSS跨站脚本攻击"></a>二、XSS跨站脚本攻击</h4><p>SS(Cross Site Script)，与SQL注入相似，XSS是通过网页插入恶意脚本，主要用到的技术也是前端的HTML和JavaScript脚本。当用户浏览网页时，实现控制用户浏览器行为的攻击方式。</p><p>一次成功的XSS，可以获取到用户的cookie，利用该cookie盗取用户对该网站的操作权限；也可以获取到用户联系人列表，利用被攻击者的身份向特定的目标群发送大量的垃圾信息，等等。</p><p>XSS分为三类：存储型(持久性XSS)、反射型(非持久性XSS)、DOM型。</p><img src="https://img3.sycdn.imooc.com/5d4d0f400001839310800361.jpg" alt="img" style="zoom:50%;" /><p><strong>测试方法：</strong></p><p>在数据输入界面，输入：，保存成功后如果弹出对话框，表明此处存在一个XSS 漏洞。</p><p>或把url请求中参数改为，如果页面弹出对话框，表明此处存在一个XSS 漏洞。</p><h4 id="三、CSRF跨站伪造请求攻击"><a href="#三、CSRF跨站伪造请求攻击" class="headerlink" title="三、CSRF跨站伪造请求攻击"></a>三、CSRF跨站伪造请求攻击</h4><p>CSRF(Cross Site Request Forgery)，利用已登录的用户身份，以用户的名义发送恶意请求，完成非法操作。</p><p>例如：用户如果浏览并信任了存在CSRF漏洞的网站A，浏览器产生了相应的cookie，用户在没有退出该网站的情况下，访问了危险网站B 。</p><p>危险网站B要求访问网站A，发出一个请求。浏览器带着用户的cookie信息访问了网站A，因为网站A不知道是用户自身发出的请求还是危险网站B发出的请求，所以就会处理危险网站B的请求，这样就完成了模拟用户操作的目的。这就是CSRF攻击的基本思想。</p><p><strong>测试方法：</strong></p><ol><li><p>同个浏览器打开两个页面，一个页面权限失效后，另一个页面是否可操作成功，如果仍然能操作成功即存在风险。</p></li><li><p>使用工具发送请求，在http请求头中不加入referer字段，检验返回消息的应答，应该重新定位到错误界面或者登录界面。</p></li></ol><h4 id="四、文件上传漏洞"><a href="#四、文件上传漏洞" class="headerlink" title="四、文件上传漏洞"></a>四、文件上传漏洞</h4><p>文件上传攻击是指攻击者上传了一个可执行文件到服务器上，并执行。</p><p>这种攻击方式是最直接有效的。上传的文件可以是病毒、木马、恶意脚本或者是webshell等等。</p><p>Webshell是以asp、php、jsp或者cgi等网页文件形式存在的一种命令执行环境，也可以说是一种网页后门。攻击者在受影响系统防止或插入webshell后，可以通过webshell方便进入系统，达到控制网站服务器的目的。</p><p><strong>测试方法：</strong></p><p>对上传的文件类型、大小等进行严格校验，禁止上传恶意代码的文件。</p><p>对相关目录的执行权限进行校验，可以通过浏览器访问Web 服务器上的所有目录，检查是否返回目录结构，如果显示的是目录结构，则可能存在安全问题。</p><h4 id="五、URL跳转漏洞"><a href="#五、URL跳转漏洞" class="headerlink" title="五、URL跳转漏洞"></a>五、URL跳转漏洞</h4><p>URL跳转漏洞，即未经验证的重定向漏洞，是指Web程序直接跳转到参数中的URL，或者在页面中引入了任意开发者的URL，将程序引导到不安全的第三方区域，从而导致安全问题。</p><p><strong>测试方法：</strong></p><p>1.使用抓包工具抓取请求。</p><p>2.抓取302的url，修改目标地址，查看是否能跳转。</p><p>ps：不过现在很多跳转都加了referer的校验导致攻击者跳转失败。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础入门&quot;&gt;&lt;a href=&quot;#基础入门&quot; class=&quot;headerlink&quot; title=&quot;基础入门&quot;&gt;&lt;/a&gt;基础入门&lt;/h2&gt;&lt;h3 id=&quot;1-域名&quot;&gt;&lt;a href=&quot;#1-域名&quot; class=&quot;headerlink&quot; title=&quot;1.域名&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yuanyi99.github.io/2021/02/19/hello-world/"/>
    <id>http://yuanyi99.github.io/2021/02/19/hello-world/</id>
    <published>2021-02-19T05:36:30.996Z</published>
    <updated>2021-05-11T04:38:57.895Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
